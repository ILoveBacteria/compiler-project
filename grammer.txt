S -> 
    Define S | Assign S | Unary S | Print S | Comment S | If S | While S | for S
    Define | Assign | Unary | Print | Comment | If | While | for


Block -> 
    Assign S | Unary S | Print S | Comment S | If S | While S | for S
    Assign | Unary | Print | Comment | If | While | for


Define -> 
	"int"  Variable ";" |
	"bool" Variable ";"


Variable ->
	Identifier_A |
	Identifier_A "=" Value |
	Identifier_A "," Variable |
	Identifier_A "=" Value "," Variable


Value ->
	Boolean |
	Number_A


Digit ->
	0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9


Number_A ->
	Number_B |
	"-" Number_B


Number_B ->
	Digit |
	Digit Number_B


Boolean ->
	true |
	false


Identifier_A ->
	Alphabet |
	Alphabet Identifier_B


Identifier_B ->
	Digit |
	Alphabet | 
	Digit Identifier_B |
	Alphabet Identifier_B
    

Print ->
	"print(" Identifier_A ");"


Comment ->
	"/*" CommentBody


CommentBody ->
	"*/"
	Digit CommentBody |
	Alphabet CommentBody |


Assign -> Identifier_A AssignOperation Value ";"


AssignOperation -> "-=" | "+=" | "*=" | "/=" | "="


Value -> LogicalValue | ArithmeticValue


ArithmeticValue ->
    ArithmeticValue "+" Term |
    ArithmeticValue "-" Term | 
    Term


Term -> Term "*" Power |
        Term "%" Power |
        Term "/" Power | Power


Power -> Power "^" Factor | Factor


Factor -> Identifier_A | Number_A | "(" ArithmeticValue ")" | "-(" ArithmeticValue ")"


CompareOperation -> ">" | "<" | ">=" | "<=" | "=="


logicalValue -> 
    "(" logicalValue ")" |
    "true" |
    "false" |
    ArithmeticValue CompareOperation ArithmeticValue |
    logicalValue "and" logicalValue |
    logicalValue "or" logicalValue |
    Identifier_A

    
Unary ->
    Identifier_A "++" ";" |
    Identifier_A "--" ";" |


If ->
    "if" "(" logicalValue ")" "{" Block "}" |
    "if" "(" logicalValue ")" "{" Block "}" Else |
    "if" "(" logicalValue ")" "{" Block "}" ElseIf |
    "if" "(" logicalValue ")" "{" Block "}" ElseIf Else |
    
    "if" "(" logicalValue ")" "{" "}" |
    "if" "(" logicalValue ")" "{" "}" Else |
    "if" "(" logicalValue ")" "{" "}" ElseIf |
    "if" "(" logicalValue ")" "{" "}" ElseIf Else |
    


Else ->
    "else" "{" Block "}" | 
    "else" "{" "}"


ElseIf ->
    "else if" "(" logicalValue ")" "{" Block "}" |
    "else if" "(" logicalValue ")" "{" Block "}" ElseIf |
    "else if" "(" logicalValue ")" "{" "}" |
    "else if" "(" logicalValue ")" "{" "}" ElseIf |
    